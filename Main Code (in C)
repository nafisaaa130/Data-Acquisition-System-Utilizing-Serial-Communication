// filename ******** Main.C ************** 
// Example main program for SCI 9S12C32 gadlfy example   
// 9S12C32 SCI connected to PC com port
// does not run in BOOT mode, only in RUN mode

//  This example accompanies the books
//   "Embedded Microcomputer Systems: Real Time Interfacing", 
//     Thomsen, copyright (c) 2006,
//   "Introduction to Embedded Microcomputer Systems: 
//    Motorola 6811 and 6812 Simulation", Brooks-Cole, copyright (c) 2002,
//    Jonathan W. Valvano 3/17/07

// You may use, edit, run or distribute this file 
//    as long as the above copyright notices remain

//**********************************************************************************
// Adapted for the Technological Arts EsduinoXtreme board by Carl Barnes, 11/28/2014
//**********************************************************************************

#include <hidef.h>      /* common defines and macros */
#include "derivative.h"  /* derivative information */
#include "SCI.h"

/*Prototypes*/
  void setClk(void);
  void delay1ms(unsigned int multiple);
  void OutCRLF(void){
  SCI_OutChar(CR);
  SCI_OutChar(LF);
  PTJ ^= 0x20;          // toggle LED D2
}

//GLOBAL VARIABLE//////////////////////////////////////

  unsigned int i, x, start, mode, val, degree10,degreec;
  float volt, accel,degree;
  unsigned Char1, Char2;
  
//MAIN FUNCTION//////////////////////////////////////// 
  
  void main(void) { 
     
  /* ESDUINO PORT CONFIGURATION BELOW (Don't Edit) */
  /////////////////////////////////////////////////////  
  // Initialize uC environment//
  setClk();         //set bus speed to 4MHz  
// Configuring PAD0 - PAD11

  // Configure PAD0-PAD7 Pins
  DDR1AD = 0x1F;        // Set PAD0 - PAD4 as output pins and PAD5 - PAD7 as input pins 
  ATDDIEN = 0x0060;     // Configure PT1AD7-PT1AD5 (A6 to A5 on the Esduino) as digital inputs
  PER1AD = 0x60;        // Enable pull-up registers for input pins (A5 - A6)

  DDR0AD = 0xFF;        // Output Pins (PAD8 - PAD11)
  PT0AD = 0x00;

 
  // Configure on-board LED 
  DDRJ = 0x01;          // Set pin D13 (on board LED) to an output
  PTJ = 0x01;           // Make sure the LED isn't on to begin with, since that would be confusing
  //for(;;){
    //delay1ms(1000);
    //PTJ ^= 0x01;
    //delay1ms(1000);
    //PTJ ^= 0x01;
  //}

 
  // Setup and enable ADC channel 7
// Refer to Chapter 14 in S12G Reference Manual for ADC subsystem details
		
	ATDCTL1 = 0x4F;		// set for 12-bit resolution
	ATDCTL3 = 0x98;		// left justified, one sample per sequence
	ATDCTL4 = 0x1F;		// prescaler = 31; ATD clock = 4MHz / (2 * (31 + 1)) == 62500 Hz
	ATDCTL5 = 0x27;		// continuous conversion on channel 7 (setting MULT = 0)  

//Setup ADC input

// Setup LED and SCI
 SCI_Init(19200);
  
 SCI_OutString("Nafisa Sarowar - 400051029"); OutCRLF();
  
  for(;;) {
    if(PTI1AD == 0xDF || PTI1AD == 0xBF){;}
      delay1ms(20);
      val = ATDDR0;
      volt = val/2700.0; //converting analog to voltage => V_ref*(AnalogValue/maxAnalogValue) = voltage
      volt = volt*33.0/10.0;
      accel = (((33.0*val/2700.0)/10.0)-2.72)*10.0/3.0;
          //
      if(accel < 0){
      accel = 0;
      degree = accel*900.0/157.0*10;
      }
      if(accel>0){
      degree = (accel*900.0/157.0*10);//(180.0/157.0)*50.0/10.0;  //degree
      }
      degreec = (int)degree;
      if(PTI1AD == 0xDF){ //for Mode 0 - approximate degree for LED display 
        
      SCI_OutString("Mode changed to"); SCI_OutUDec(0); OutCRLF(); 
        
        //for(;;){   //for representing the angle
          val = ATDDR0;
          volt = val/2700.0; //converting analog to voltage => V_ref*(AnalogValue/maxAnalogValue) = voltage
          volt = volt*33.0/10.0;
          accel = (((33.0*val/2700.0)/10.0)-2.72)*10.0/3.0;
          //
          if(accel < 0){
             accel = 0;
             degree = accel*900.0/157.0*10;
          }
          if(accel>0){
             degree = (accel*900.0/157.0*10);//(180.0/157.0)*50.0/10.0;  //degree
           }
          degreec = (int)degree;
          PT1AD = degreec&0b000011111;      //lower bits from PAD0 - PAD5
          PT0AD = (degreec&0b111100000)>>5; //upper bits from PAD8 - PAD11
          SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
          SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
          SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
          delay1ms(200);
          
          Char1 = 1; //low bits
          Char2 = 1; //high bits
        
     
          Char1 = val&0x00FF; //taking the lower bits
          SCI_OutChar(Char1);
        
          DDRJ |= 0x01;
          Char2 = val >> 8; //taking the higher bits
          SCI_OutChar(Char2);
          //continue;
        //}
        continue;
      }
        
        if(PTI1AD == 0xBF){ //for Mode 1 - rounding to the nearest 10 of the degree
        SCI_OutString("Mode changed to"); SCI_OutUDec(1); OutCRLF(); 
        for(;;){    //for representing the rounded angle
            PT1AD = 0;
            PT0AD = 0;
            val = ATDDR0;
            volt = val/2700.0; //converting analog to voltage => V_ref*(AnalogValue/maxAnalogValue) = voltage
            volt = volt*33.0/10.0;
            accel = (((33.0*val/2700.0)/10.0)-2.72)*10.0/3.0;
            if(accel < 0){
             accel = 0;
             degree = 0;
            }
            if(accel>0){
             degree = (accel*900.0/157.0*10);//(180.0/157.0)*50.0/10.0;  //degree
            }
            degreec = (int)degree;
            degree10 = degreec/10;
              if(degree10 == 1 && (degreec%10 == 0 ||degreec%10 <5)){
                PT1AD = 0x01;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 2 && (degreec%10 == 0 ||degreec%10 <5)){
                PT1AD = 0x03;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 ==3 && (degreec%10 == 0 ||degreec%10 <5)){
                PT1AD = 0x07;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 4 && (degreec%10 == 0 ||degreec%10 <5)){
                PT1AD = 0x0F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 5 && (degreec%10 == 0 ||degreec%10 <5)){
                PT1AD = 0x1F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 6 && (degreec%10 == 0 ||degreec%10 <5)){
                PT0AD = 0x01;
                PT1AD = 0x1F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 7 && (degreec%10 == 0 ||degreec%10 <5)){
                PT0AD = 0x03;
                PT1AD = 0x1F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 8 && (degreec%10 == 0 ||degreec%10 <5)){
                PT0AD = 0x07;
                PT1AD = 0x1F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 9 && (degreec%10 == 0 ||degreec%10 <5)){
                PT0AD = 0x0F;
                PT1AD = 0x1F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
            
              if(degree10 == 0 && degreec%10>=5){
                PT1AD = 0x01;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 1 && degreec%10>=5){
                PT1AD = 0x03;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 ==2 && degreec%10>=5){
                PT1AD = 0x07;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 3 && degreec%10>=5){
                PT1AD = 0x0F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 4 && degreec%10>=5){
                PT1AD = 0x1F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 5 && degreec%10>=5){
                PT0AD = 0x01;
                PT1AD = 0x1F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 6 && degreec%10>=5){
                PT0AD = 0x03;
                PT1AD = 0x1F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 7 && degreec%10>=5){
                PT0AD = 0x07;
                PT1AD = 0x1F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
              if(degree10 == 8 && degreec%10>=5){
                PT0AD = 0x0F;
                PT1AD = 0x1F;
                delay1ms(200);
                  SCI_OutString("Angle is "); SCI_OutUDec(degree); OutCRLF();
                  SCI_OutString("Voltage is "); SCI_OutUDec(volt); OutCRLF();
                  SCI_OutString("Val is "); SCI_OutUDec(val); OutCRLF();
                continue;
              }
        }
        }
        
  }
  }
 
     


/////////////////////////////////////////////////////
// NAME: Set Clock to 4 MHz
// DESCRIPTION: The following code is adapted from the ESDX User Guide and the Serial Monitor code (S12SerMon2r7) to set the clock speed. 
// REFERENCES: W8 Slide 21 and MC9S12G Reference Manual
/////////////////////////////////////////////////////
//#define initSYNR  0x02        //mult by synr + 1 = 3 (24MHz)
//#define VCOFRQ    0x40        //vco gain
//#define initREFDV 0x00        //
//#define REFFRQ    0x80        //pll stability

void setClk(void){

  CPMUPROT = 0x00;               //(PROT = 0) Disabling protection of clock configuration to configure the bus clock
  CPMUCLKS = 0x80;               //system clock is retrieved from the OSCCLK (PLLSEL = 1)
  
  CPMUOSC = 0x80;                //External oscillator = 8 MHz and OSCCLK(=1) is used as the bus clock 
                                 //and qualified by the PLLCLK
  
  CPMUREFDIV = 0x21;             //(REFFRQ = 2 and REFDIV = 1), using the formula from page 362, freq_REF = 4 MHz
  
  CPMUSYNR = 0x05;               //(VCOFRQ = 0 and SYNDIV = 5), using formula from page 361, freq_VCO=48 MHz
  
  CPMUPOSTDIV = 0x05;            //(POSTDIV = 5), so the freq_PLL=8 MHz
  
  while (CPMUFLG_LOCK == 0) {}  // wait for it  (PLL/2 = 4 MHz)
  
  CPMUPROT = 1;              //(PROT = 1) Enabling protection of clock configuration to configure the bus clock
}

/////////////////////////////////////////////////////
// NAME: Delay Function
// DESCRIPTION: This function will delay by multiples of 1ms based upon the polling of the timer overflow bit.
//REFERENCES: W8 Slide 27
/////////////////////////////////////////////////////
void delay1ms(unsigned int multiple){
  unsigned int i; //loop control variable
  TSCR1 = 0x90;   //enable timer and fast timer flag clear (channel flag cleared when reading input capture)
  TSCR2 = 0x00;   //Prescaler=1 (2nd way to control Delay size is using 0 to 7)
                  //disable timer interupt
  TIOS |= 0x01;   //output channel 0
  
  TC0 = TCNT + 4000; //16-bit up counter register, each increment of TCNT takes 1 bus cycle 
  
  for(i=0; i<multiple; i++) {
    TFLG2 = 0x80;
    while(!(TFLG1_C0F));   //
    TC0 += 4200;
  }
  TIOS &= -0x01;  //disable output capture
}

